group_by(symbol) %>%
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = "monthly",
type = "log",
col_rename='returns') %>%
separate(date, into = c('year', 'month', 'day'))
returnsMonthly$Help <- paste(returnsMonthly$symbol, returnsMonthly$year, returnsMonthly$month)
returnsYearly <- stockPrices %>%
group_by(symbol) %>%
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = "yearly",
type = "log",
col_rename='returns') %>%
separate(date, into = c('year', 'month', 'day'))
returnsYearly$Help <- paste(returnsYearly$symbol, returnsYearly$year)
volMonthly <- returnsDaily %>%
group_by(symbol, year, month) %>%
summarise(sd = sd(returns)) %>%
arrange(symbol, year, month)
volMonthly$Help <- paste(volMonthly$symbol, volMonthly$year, volMonthly$month)
volYearly <- returnsDaily %>%
group_by(symbol, year) %>%
summarise(sd = sd(returns)) %>%
arrange(symbol)
volYearly$Help <- paste(volYearly$symbol, volYearly$year)
dataYearly <- left_join(returnsYearly, volYearly, by = c("Help" = "Help"))
dataYearly <- dataYearly %>%
select('symbol.x','year.x','returns','sd') %>%
rename('symbol'='symbol.x', 'year'='year.x' )
dataMonthly <- left_join(returnsMonthly, volMonthly, by = c("Help" = "Help"))
dataMonthly <- dataMonthly %>%
select('symbol.x','year.x','month.x','returns','sd') %>%
rename('symbol'='symbol.x', 'month' = 'month.x','year'='year.x' )
dataMonthly$YrMo <- paste(dataMonthly$year, dataMonthly$month, sep = "")
dataMonthly <- dataMonthly %>% relocate('symbol','YrMo','year','month','returns','sd')
save(dataYearly, file="YearlyReturnsSDsp500-4year.Rdata")
save(dataMonthly, file="MonthlyReturnsSDsp500-4year.Rdata")
input = data.frame(start_date = '2019-12-03', end_date='2020-04-05',num_clusters=3)
dataMonthly_subset =  dataMonthly %>%
filter(YrMo >= format(as.Date(input$start_date, format="%Y-%m-%d"),"%Y%m")
& YrMo <= format(as.Date(input$end_date, format="%Y-%m-%d"),"%Y%m")) %>%
select('symbol', 'YrMo', 'returns','sd')
mls <- split(dataMonthly_subset, f=dataMonthly_subset$YrMo)
myv <- c("returns","sd")
kls <- lapply(X=mls, FUN=function(x){x$clust <- kmeans(x[, myv],
centers=2)$cluster ; return(x)})
finaldf <- do.call(rbind, kls)
dataMonthly_subset$clusters = clustersMO$cluster
dataMonthly_subset$clusters = finaldf$cluster
dataMonthly_subset$clusters = finaldf$clust
finaldf
dataMonthly_subset
finaldf <- do.call(rbind, kls)
finaldf
clustersbyMo <- finaldf %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol")) %>%
drop_na() %>%
filter(SectorF == input$selSector)
sp500Sectors = read.csv("constituents_csv.csv") %>%
mutate(sectorF = as.factor(Sector)) %>%
mutate(sectorNumeric = as.numeric(sectorF))
stockInfo = sp500Sectors %>% select(Symbol, sectorF)
clustersbyMo <- finaldf %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol")) %>%
drop_na() %>%
filter(SectorF == input$selSector)
input = data.frame(start_date = '2019-12-03', end_date='2020-04-05',num_clusters=3, selSector='Materials')
clustersbyMo <- finaldf %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol")) %>%
drop_na() %>%
filter(SectorF == input$selSector)
View(input)
finaldf <- finaldf %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol")) %>%
drop_na()
finaldf
finaldf <- finaldf %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol")) %>%
drop_na() %>%
filter(sectorF == input$selSector)
finaldf <- finaldf %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol")) %>%
drop_na()
finaldf
finaldf <- finaldf %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol")) %>%
drop_na() %>%
filter(sectorF = input$selSector)
finaldf <- finaldf %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol")) %>%
drop_na()
dataMonthly_subset$clusters = finaldf$clust
#require(caret)
#require(quantmod)
require(dplyr)
require(tidyverse)
require(tidyquant)
require(lubridate)
require(ggplot2)
require(reshape2)
require(dtw)
require(dtwclust)
require(TSclust)
require(timetk)
require(cluster)
require(factoextra)
require(dendextend)
rm(list=ls())
#Get Stock Index
stockIndex = tq_index("SP500") #SP500
#Fix stock symbols
stockIndex$symbolFixed = gsub("\\.", "-",stockIndex$symbol)
#Get Quantitative Data
startDate = "2017-01-01"
endDate = "2021-02-28"
#complete_cases = TRUE - removes symbols that return an NA
stockPrices <- tq_get(stockIndex$symbolFixed, get = "stock.prices", from = startDate, to =endDate, complete_cases = TRUE )
load("stockDatasp500-4year.Rdata")
sp500Sectors = read.csv("constituents_csv.csv") %>%
mutate(sectorF = as.factor(Sector)) %>%
mutate(sectorNumeric = as.numeric(sectorF))
stockInfo = sp500Sectors %>% select(Symbol, sectorF)
returnsDaily <- stockPrices %>%
group_by(symbol) %>%
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = "daily",
type = "log",
col_rename='returns') %>%
separate(date, into = c('year', 'month', 'day'))
returnsMonthly <- stockPrices %>%
group_by(symbol) %>%
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = "monthly",
type = "log",
col_rename='returns') %>%
separate(date, into = c('year', 'month', 'day'))
returnsMonthly$Help <- paste(returnsMonthly$symbol, returnsMonthly$year, returnsMonthly$month)
returnsYearly <- stockPrices %>%
group_by(symbol) %>%
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = "yearly",
type = "log",
col_rename='returns') %>%
separate(date, into = c('year', 'month', 'day'))
returnsYearly$Help <- paste(returnsYearly$symbol, returnsYearly$year)
volMonthly <- returnsDaily %>%
group_by(symbol, year, month) %>%
summarise(sd = sd(returns)) %>%
arrange(symbol, year, month)
volMonthly$Help <- paste(volMonthly$symbol, volMonthly$year, volMonthly$month)
volYearly <- returnsDaily %>%
group_by(symbol, year) %>%
summarise(sd = sd(returns)) %>%
arrange(symbol)
volYearly$Help <- paste(volYearly$symbol, volYearly$year)
dataYearly <- left_join(returnsYearly, volYearly, by = c("Help" = "Help"))
dataYearly <- dataYearly %>%
select('symbol.x','year.x','returns','sd') %>%
rename('symbol'='symbol.x', 'year'='year.x' )
dataMonthly <- left_join(returnsMonthly, volMonthly, by = c("Help" = "Help"))
dataMonthly <- dataMonthly %>%
select('symbol.x','year.x','month.x','returns','sd') %>%
rename('symbol'='symbol.x', 'month' = 'month.x','year'='year.x' )
dataMonthly$YrMo <- paste(dataMonthly$year, dataMonthly$month, sep = "")
dataMonthly <- dataMonthly %>% relocate('symbol','YrMo','year','month','returns','sd')
save(dataYearly, file="YearlyReturnsSDsp500-4year.Rdata")
save(dataMonthly, file="MonthlyReturnsSDsp500-4year.Rdata")
input = data.frame(start_date = '2019-12-03', end_date='2020-04-05',num_clusters=3, selSector='Materials')
dataMonthly_subset =  dataMonthly %>%
filter(YrMo >= format(as.Date(input$start_date, format="%Y-%m-%d"),"%Y%m")
& YrMo <= format(as.Date(input$end_date, format="%Y-%m-%d"),"%Y%m")) %>%
select('symbol', 'YrMo', 'returns','sd')
mls <- split(dataMonthly_subset, f=dataMonthly_subset$YrMo)
myv <- c("returns","sd")
kls <- lapply(X=mls, FUN=function(x){x$clust <- kmeans(x[, myv],
centers=2)$cluster ; return(x)})
finaldf <- do.call(rbind, kls)
dataMonthly_subset$clusters = finaldf$clust
dataMonthly_subset
dataMonthly_subset2 <- dataMonthly_subset %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol")) %>%
drop_na()
dataMonthly_subset2
dataMonthly_subset3 <- dataMonthly_subset2 %>%
filter(sectorF == input$selSector)
dataMonthly_subset3
dataMonthly_subset4 <- dataMonthly_subset %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol")) %>%
drop_na() %>%
filter(sectorF == input$selSector)
dataMonthly_subset4
input = data.frame(start_date = '2019-12-03', end_date='2020-04-05',num_clusters=3, selSector='All')
dataMonthly_subset4 <- dataMonthly_subset %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol")) %>%
drop_na() %>%
filter(sectorF == input$selSector)
dataMonthly_subset4 <- dataMonthly_subset %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol")) %>%
drop_na() %>%
{ if(input$selSector = 'All') drop_na() else filter(sectorF == input$selSector)}
dataMonthly_subset4 <- dataMonthly_subset %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol")) %>%
drop_na() %>%
{ if(input$selSector == 'All') drop_na() else filter(sectorF == input$selSector)}
dataMonthly_subset4 <- dataMonthly_subset %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol")) %>%
drop_na() %>%
{ if(input$selSector == 'All') else filter(sectorF == input$selSector)}
dataMonthly_subset4 <- dataMonthly_subset %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol")) %>%
{ if(input$selSector == 'All')drop_na()  else filter(sectorF == input$selSector)}
filter( if (input$selSector  != "") { sectorF == sectorF } else {  sectorF == sectorF  })
dataMonthly_subset4 <- dataMonthly_subset %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol")) %>%
{ if(input$selSector == 'All') drop_na()  else filter(sectorF == input$selSector)}
dataMonthly_subset4 <- dataMonthly_subset %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol")) %>%
filter( if (input$selSector  != "") { sectorF == sectorF } else {  sectorF == sectorF  })
dataMonthly_subset4
dataMonthly_subset
dataMonthly_subset2
dataMonthly_subset4
dataMonthly_subset2
dataMonthly_subset4
View(dataMonthly_subset4)
dataMonthly_subset4 <- dataMonthly_subset %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol"))%>%
filter( if (input$selSector  != "") { sectorF == sectorF } else {  sectorF == sectorF  }) %>%
drop_na()
library(shiny); runApp('apptesting2.R')
#require(caret)
#require(quantmod)
require(dplyr)
require(tidyverse)
require(tidyquant)
require(lubridate)
require(ggplot2)
require(reshape2)
require(dtw)
require(dtwclust)
require(TSclust)
require(timetk)
require(cluster)
require(factoextra)
require(dendextend)
rm(list=ls())
load("stockDatasp500-4year.Rdata")
#require(caret)
#require(quantmod)
require(dplyr)
require(tidyverse)
require(tidyquant)
require(lubridate)
require(ggplot2)
require(reshape2)
require(dtw)
require(dtwclust)
require(TSclust)
require(timetk)
require(cluster)
require(factoextra)
require(dendextend)
rm(list=ls())
load("stockDatasp500-4year.Rdata")
sp500Sectors = read.csv("constituents_csv.csv") %>%
mutate(sectorF = as.factor(Sector)) %>%
mutate(sectorNumeric = as.numeric(sectorF))
stockInfo = sp500Sectors %>% select(Symbol, sectorF)
load("YearlyReturnsSDsp500-4year.Rdata")
load("MonthlyReturnsSDsp500-4year.Rdata")
input = data.frame(start_date = '2019-12-03', end_date='2020-04-05',num_clusters=3, selSector='All')
dataMonthly_subset =  dataMonthly %>%
filter(YrMo >= format(as.Date(input$start_date, format="%Y-%m-%d"),"%Y%m")
& YrMo <= format(as.Date(input$end_date, format="%Y-%m-%d"),"%Y%m")) %>%
select('symbol', 'YrMo', 'returns','sd')
mls <- split(dataMonthly_subset, f=dataMonthly_subset$YrMo)
myv <- c("returns","sd")
kls <- lapply(X=mls, FUN=function(x){x$clust <- kmeans(x[, myv],
centers=2)$cluster ; return(x)})
finaldf <- do.call(rbind, kls)
dataMonthly_subset$clusters = finaldf$clust
dataMonthly_subset4 <- dataMonthly_subset %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol"))%>%
filter( if (input$selSector  != "") { sectorF == sectorF } else {  sectorF == sectorF  }) %>%
drop_na()
dataMonthly_subset2 <- dataMonthly_subset %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol")) %>%
drop_na()
runApp('apptesting2.R')
shiny::runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/ShinyApp')
getwd()
getSrcDirectory()
dirname(getActiveDocumentContext()$path
)
setwd("D:/TAMU/656 Applied Analytics/STAT656_Project/ShinyApp")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting2.R')
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting2.R')
#require(caret)
#require(quantmod)
require(dplyr)
require(tidyverse)
require(tidyquant)
require(lubridate)
require(ggplot2)
require(reshape2)
require(dtw)
require(dtwclust)
require(TSclust)
require(timetk)
require(cluster)
require(factoextra)
require(dendextend)
rm(list=ls())
load("stockDatasp500-4year.Rdata")
sp500Sectors = read.csv("constituents_csv.csv") %>%
mutate(sectorF = as.factor(Sector)) %>%
mutate(sectorNumeric = as.numeric(sectorF))
stockInfo = sp500Sectors %>% select(Symbol, sectorF)
load("YearlyReturnsSDsp500-4year.Rdata")
load("MonthlyReturnsSDsp500-4year.Rdata")
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting.R')
runApp()
View(dataMonthly)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting.R')
load("stockDatasp500-4year.Rdata")
sp500Sectors = read.csv("constituents_csv.csv") %>%
mutate(sectorF = as.factor(Sector)) %>%
mutate(sectorNumeric = as.numeric(sectorF))
stockInfo = sp500Sectors %>% select(Symbol, sectorF)
load("YearlyReturnsSDsp500-4year.Rdata")
load("MonthlyReturnsSDsp500-4year.Rdata")
input = data.frame(start_date = '2019-12-03', end_date='2020-04-05',num_clusters=3, selSector='All')
dataMonthly_subset =  dataMonthly %>%
filter(YrMo >= format(as.Date(input$start_date, format="%Y-%m-%d"),"%Y%m")
& YrMo <= format(as.Date(input$end_date, format="%Y-%m-%d"),"%Y%m")) %>%
select('symbol', 'YrMo', 'returns','sd')
mls <- split(dataMonthly_subset, f=dataMonthly_subset$YrMo)
myv <- c("returns","sd")
kls <- lapply(X=mls, FUN=function(x){x$clust <- kmeans(x[, myv],
centers=2)$cluster ; return(x)})
finaldf <- do.call(rbind, kls)
dataMonthly_subset$clusters = finaldf$clust
dataMonthly_subset2 <- dataMonthly_subset %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol")) %>%
drop_na()
dataMonthly_subset3 <- dataMonthly_subset2 %>%
filter(sectorF == input$selSector)
dataMonthly_subset4 <- dataMonthly_subset %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol"))%>%
filter( if (input$selSector  != "") { sectorF == sectorF } else {  sectorF == sectorF  }) %>%
drop_na()
dataMonthly_subset4
dataMonthly_subset4 <- dataMonthly_subset %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol"))%>%
filter( if (input$selSector  == "All") { sectorF == sectorF } else {  sectorF == sectorF  }) %>%
drop_na()
dataMonthly_subset4
ggplot() +
geom_point(data = dataMonthly_subset4(),
mapping = aes(x = dataMonthly_subset4()$returns,
y = dataMonthly_subset4()$sd,
colour = factor(dataMonthly_subset4()$clust) )) +
facet_wrap(~ dataMonthly_subset4()$YrMo, scales = "free_y") +
labs(title = 'Monthly Return and Volatility Clusters' ,
y = "Returns",
x = "Volatility",
colour = "Clusters")
dataMonthly_subset4
ggplot() +
geom_point(data = dataMonthly_subset4,
mapping = aes(x = dataMonthly_subset4$returns,
y = dataMonthly_subset4$sd,
colour = factor(dataMonthly_subset4$clust) )) +
facet_wrap(~ dataMonthly_subset4$YrMo, scales = "free_y") +
labs(title = 'Monthly Return and Volatility Clusters' ,
y = "Returns",
x = "Volatility",
colour = "Clusters")
dataMonthly_subset4
kls <- lapply(X=mls, FUN=function(x){x$clust <- kmeans(x[, myv],
centers=num_clusters)$cluster ; return(x)})
input = data.frame(start_date = '2019-12-03', end_date='2020-04-05',num_clusters=3, selSector='All')
kls <- lapply(X=mls, FUN=function(x){x$clust <- kmeans(x[, myv],
centers=input$num_clusters)$cluster ; return(x)})
finaldf <- do.call(rbind, kls)
dataMonthly_subset$clusters = finaldf$clust
dataMonthly_subset2 <- dataMonthly_subset %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol")) %>%
drop_na()
dataMonthly_subset3 <- dataMonthly_subset2 %>%
filter(sectorF == input$selSector)
dataMonthly_subset4 <- dataMonthly_subset %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol"))%>%
filter( if (input$selSector  == "All") { sectorF == sectorF } else {  sectorF == sectorF  }) %>%
drop_na()
ggplot() +
geom_point(data = dataMonthly_subset4,
mapping = aes(x = dataMonthly_subset4$returns,
y = dataMonthly_subset4$sd,
colour = factor(dataMonthly_subset4$clust) )) +
facet_wrap(~ dataMonthly_subset4$YrMo, scales = "free_y") +
labs(title = 'Monthly Return and Volatility Clusters' ,
y = "Returns",
x = "Volatility",
colour = "Clusters")
dataMonthly_subset4
dataMonthly_subset4 <- dataMonthly_subset %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol"))%>%
filter( if (input$selSector  == "All") { sectorF == sectorF } else {  sectorF == input$selSector  }) %>%
drop_na()
dataMonthly_subset4
ggplot() +
geom_point(data = dataMonthly_subset4,
mapping = aes(x = dataMonthly_subset4$returns,
y = dataMonthly_subset4$sd,
colour = factor(dataMonthly_subset4$clust) )) +
facet_wrap(~ dataMonthly_subset4$YrMo, scales = "free_y") +
labs(title = 'Monthly Return and Volatility Clusters' ,
y = "Returns",
x = "Volatility",
colour = "Clusters")
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting2.R')
input = data.frame(start_date = '2019-12-03', end_date='2020-04-05',num_clusters=3, selSector='Health Care')
dataMonthly_subset =  dataMonthly %>%
filter(YrMo >= format(as.Date(input$start_date, format="%Y-%m-%d"),"%Y%m")
& YrMo <= format(as.Date(input$end_date, format="%Y-%m-%d"),"%Y%m")) %>%
select('symbol', 'YrMo', 'returns','sd')
mls <- split(dataMonthly_subset, f=dataMonthly_subset$YrMo)
myv <- c("returns","sd")
kls <- lapply(X=mls, FUN=function(x){x$clust <- kmeans(x[, myv],
centers=input$num_clusters)$cluster ; return(x)})
finaldf <- do.call(rbind, kls)
dataMonthly_subset$clusters = finaldf$clust
dataMonthly_subset2 <- dataMonthly_subset %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol")) %>%
drop_na()
dataMonthly_subset3 <- dataMonthly_subset2 %>%
filter(sectorF == input$selSector)
dataMonthly_subset4 <- dataMonthly_subset %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol"))%>%
filter( if (input$selSector  == "All") { sectorF == sectorF } else {  sectorF == input$selSector  }) %>%
drop_na()
dataMonthly_subset4
ggplot() +
geom_point(data = dataMonthly_subset4,
mapping = aes(x = dataMonthly_subset4$returns,
y = dataMonthly_subset4$sd,
colour = factor(dataMonthly_subset4$clust) )) +
facet_wrap(~ dataMonthly_subset4$YrMo, scales = "free_y") +
labs(title = 'Monthly Return and Volatility Clusters' ,
y = "Returns",
x = "Volatility",
colour = "Clusters")
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting2.R')
load('sp500-4year.RData')
stock_names = returns %>% select(1)
returns_subset =  returns %>%
select((min(which(dates > input$start_date)) + 1):(max(which(dates < input$end_date) + 1)))
returns_subset = bind_cols(stock_names, returns_subset)
clusters = tsclust(returns_subset %>% select(where(is.numeric)), k=input$num_clusters, distance="dtw_basic")
dates = as.Date(colnames(returns)[-1], format = "%Y-%m-%d") #Get rid of first index which is the stock
stock_names = returns %>% select(1)
returns_subset =  returns %>%
select((min(which(dates > input$start_date)) + 1):(max(which(dates < input$end_date) + 1)))
returns_subset = bind_cols(stock_names, returns_subset)
clusters = tsclust(returns_subset %>% select(where(is.numeric)), k=input$num_clusters, distance="dtw_basic")
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting.R')
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting.R')
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting.R')
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting.R')
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting.R')
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting.R')
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting.R')
View(clusters)
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting.R')
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting.R')
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting.R')
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting.R')
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting.R')
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting.R')
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting.R')
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting.R')
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting.R')
dataMonthly_subset4 <- dataMonthly_subset %>%
left_join(stockInfo, ., by = c("Symbol" = "symbol"))
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting.R')
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting.R')
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting.R')
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting.R')
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting.R')
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting.R')
runApp('D:/TAMU/656 Applied Analytics/STAT656_Project/Collins/apptesting.R')
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
