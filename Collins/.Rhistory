require(caret)
require(quantmod)
require(tidyverse)
require(tidyquant)
rm(list=ls())
#Get Stock Index
tq_index("SP500")
index
#Get Stock Index
stockIndex = tq_index("SP500")
View(stockIndex)
stockIndex[1]
stockIndex[1,1]
tq_get(stockIndex[1,1], get = "stock.prices", from = startDate, to =endDate )
#Get Quantitative Data
startDate = "2019-02-01"
endDate = "2021-02-01"
tq_get(stockIndex[1,1], get = "stock.prices", from = startDate, to =endDate )
tq_get(stockIndex, get = "stock.prices", from = startDate, to =endDate )
#Get Quantitative Data
startDate = "2019-02-01"
endDate = "2021-02-01"
prices = tq_get(stockIndex, get = "stock.prices", from = startDate, to =endDate )
rlang::last_error()
require(tidyquant)
#Get Stock Index
stockIndex = tq_index("SP500")
#Get Quantitative Data
startDate = "2019-02-01"
endDate = "2021-02-01"
prices = tq_get(stockIndex, get = "stock.prices", from = startDate, to =endDate )
prices = tq_get("AAPL", get = "stock.prices", from = startDate, to =endDate )
tq_get("AAPL", get = "stock.prices", from = " 1990-01-01")
require(tidyquant)
install.packages(c("astsa", "backports", "bayesplot", "BH", "biglm", "broom", "caTools", "cli", "colorspace", "CORElearn", "cowplot", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "desc", "DiceDesign", "directlabels", "distributional", "dplyr", "DT", "e1071", "fable", "fabletools", "fansi", "farver", "fastmap", "forcats", "forecast", "furrr", "future", "generics", "ggplot2", "ggrepel", "ggridges", "ggsignif", "gh", "git2r", "glmnet", "globals", "gplots", "greybox", "hardhat", "heplots", "hms", "htmltools", "httpuv", "infer", "inline", "ipred", "isoband", "jsonlite", "knitr", "lamW", "lava", "lifecycle", "lme4", "loo", "lubridate", "magrittr", "maptools", "MatrixModels", "matrixStats", "memoise", "mime", "mlbench", "openxlsx", "parsnip", "pbkrtest", "pillar", "pixmap", "pkgbuild", "pkgload", "pracma", "pROC", "processx", "progressr", "promises", "ps", "quantmod", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "recipes", "reprex", "rgl", "rio", "rlang", "rmarkdown", "rprojroot", "rsample", "rstatix", "rstudioapi", "rticles", "rvest", "shiny", "shinythemes", "slider", "smooth", "sp", "SparseM", "SQUAREM", "StanHeaders", "stringi", "testthat", "tibble", "tidymodels", "tidyposterior", "tidyr", "tinytex", "tseries", "tsibble", "tune", "usethis", "utf8", "V8", "vctrs", "withr", "workflows", "xfun", "xlsx", "zoo"))
install.packages(c("astsa", "backports", "bayesplot", "BH", "biglm", "broom", "caTools", "cli", "colorspace", "CORElearn", "cowplot", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "desc", "DiceDesign", "directlabels", "distributional", "dplyr", "DT", "e1071", "fable", "fabletools", "fansi", "farver", "fastmap", "forcats", "forecast", "furrr", "future", "generics", "ggplot2", "ggrepel", "ggridges", "ggsignif", "gh", "git2r", "glmnet", "globals", "gplots", "greybox", "hardhat", "heplots", "hms", "htmltools", "httpuv", "infer", "inline", "ipred", "isoband", "jsonlite", "knitr", "lamW", "lava", "lifecycle", "lme4", "loo", "lubridate", "magrittr", "maptools", "MatrixModels", "matrixStats", "memoise", "mime", "mlbench", "openxlsx", "parsnip", "pbkrtest", "pillar", "pixmap", "pkgbuild", "pkgload", "pracma", "pROC", "processx", "progressr", "promises", "ps", "quantmod", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "recipes", "reprex", "rgl", "rio", "rlang", "rmarkdown", "rprojroot", "rsample", "rstatix", "rstudioapi", "rticles", "rvest", "shiny", "shinythemes", "slider", "smooth", "sp", "SparseM", "SQUAREM", "StanHeaders", "stringi", "testthat", "tibble", "tidymodels", "tidyposterior", "tidyr", "tinytex", "tseries", "tsibble", "tune", "usethis", "utf8", "V8", "vctrs", "withr", "workflows", "xfun", "xlsx", "zoo"))
install.packages(c("astsa", "backports", "bayesplot", "BH", "biglm", "broom", "caTools", "cli", "colorspace", "CORElearn", "cowplot", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "desc", "DiceDesign", "directlabels", "distributional", "dplyr", "DT", "e1071", "fable", "fabletools", "fansi", "farver", "fastmap", "forcats", "forecast", "furrr", "future", "generics", "ggplot2", "ggrepel", "ggridges", "ggsignif", "gh", "git2r", "glmnet", "globals", "gplots", "greybox", "hardhat", "heplots", "hms", "htmltools", "httpuv", "infer", "inline", "ipred", "isoband", "jsonlite", "knitr", "lamW", "lava", "lifecycle", "lme4", "loo", "lubridate", "magrittr", "maptools", "MatrixModels", "matrixStats", "memoise", "mime", "mlbench", "openxlsx", "parsnip", "pbkrtest", "pillar", "pixmap", "pkgbuild", "pkgload", "pracma", "pROC", "processx", "progressr", "promises", "ps", "quantmod", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "recipes", "reprex", "rgl", "rio", "rlang", "rmarkdown", "rprojroot", "rsample", "rstatix", "rstudioapi", "rticles", "rvest", "shiny", "shinythemes", "slider", "smooth", "sp", "SparseM", "SQUAREM", "StanHeaders", "stringi", "testthat", "tibble", "tidymodels", "tidyposterior", "tidyr", "tinytex", "tseries", "tsibble", "tune", "usethis", "utf8", "V8", "vctrs", "withr", "workflows", "xfun", "xlsx", "zoo"))
install.packages(c("astsa", "backports", "bayesplot", "BH", "biglm", "broom", "caTools", "cli", "colorspace", "CORElearn", "cowplot", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "desc", "DiceDesign", "directlabels", "distributional", "dplyr", "DT", "e1071", "fable", "fabletools", "fansi", "farver", "fastmap", "forcats", "forecast", "furrr", "future", "generics", "ggplot2", "ggrepel", "ggridges", "ggsignif", "gh", "git2r", "glmnet", "globals", "gplots", "greybox", "hardhat", "heplots", "hms", "htmltools", "httpuv", "infer", "inline", "ipred", "isoband", "jsonlite", "knitr", "lamW", "lava", "lifecycle", "lme4", "loo", "lubridate", "magrittr", "maptools", "MatrixModels", "matrixStats", "memoise", "mime", "mlbench", "openxlsx", "parsnip", "pbkrtest", "pillar", "pixmap", "pkgbuild", "pkgload", "pracma", "pROC", "processx", "progressr", "promises", "ps", "quantmod", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "recipes", "reprex", "rgl", "rio", "rlang", "rmarkdown", "rprojroot", "rsample", "rstatix", "rstudioapi", "rticles", "rvest", "shiny", "shinythemes", "slider", "smooth", "sp", "SparseM", "SQUAREM", "StanHeaders", "stringi", "testthat", "tibble", "tidymodels", "tidyposterior", "tidyr", "tinytex", "tseries", "tsibble", "tune", "usethis", "utf8", "V8", "vctrs", "withr", "workflows", "xfun", "xlsx", "zoo"))
install.packages(c("astsa", "backports", "bayesplot", "BH", "biglm", "broom", "caTools", "cli", "colorspace", "CORElearn", "cowplot", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "desc", "DiceDesign", "directlabels", "distributional", "dplyr", "DT", "e1071", "fable", "fabletools", "fansi", "farver", "fastmap", "forcats", "forecast", "furrr", "future", "generics", "ggplot2", "ggrepel", "ggridges", "ggsignif", "gh", "git2r", "glmnet", "globals", "gplots", "greybox", "hardhat", "heplots", "hms", "htmltools", "httpuv", "infer", "inline", "ipred", "isoband", "jsonlite", "knitr", "lamW", "lava", "lifecycle", "lme4", "loo", "lubridate", "magrittr", "maptools", "MatrixModels", "matrixStats", "memoise", "mime", "mlbench", "openxlsx", "parsnip", "pbkrtest", "pillar", "pixmap", "pkgbuild", "pkgload", "pracma", "pROC", "processx", "progressr", "promises", "ps", "quantmod", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "recipes", "reprex", "rgl", "rio", "rlang", "rmarkdown", "rprojroot", "rsample", "rstatix", "rstudioapi", "rticles", "rvest", "shiny", "shinythemes", "slider", "smooth", "sp", "SparseM", "SQUAREM", "StanHeaders", "stringi", "testthat", "tibble", "tidymodels", "tidyposterior", "tidyr", "tinytex", "tseries", "tsibble", "tune", "usethis", "utf8", "V8", "vctrs", "withr", "workflows", "xfun", "xlsx", "zoo"))
```{r setup}
#include=FALSE,message=FALSE, warning=FALSE}
require(dplyr)
require(caret)
require(quantmod)
require(tidyverse)
require(tidyquant)
rm(list=ls())
#Get Stock Index
stockIndex = tq_index("SP500")
require(tidyquant)
# installing/loading the package:
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr
updateR(F, T, T, F, T, F, T) # install, move, update.package, quit R.
#, include=FALSE,message=FALSE, warning=FALSE}
#require(caret)
#require(quantmod)
require(dplyr)
require(tidyverse)
require(tidyquant)
require(dtw)
require(dtwclust)
rm(list=ls())
#Get Stock Index
stockIndex = tq_index("DOW") #SP500 #DOW
#Fix stock symbols
stockIndex$symbolFixed = gsub("\\.", "-",stockIndex$symbol)
#Get Quantitative Data
startDate = "2019-01-01"
endDate = "2019-12-31"
#complete_cases = TRUE - removes symbols that return an NA
stockPrices = tq_get(stockIndex$symbolFixed, get = "stock.prices", from = startDate, to =endDate, complete_cases = TRUE )
save(stockPrices, file="StockData.Rdata")
stockPrices <- stockPrices %>%   group_by(symbol) %>%
tq_mutate(select = close, mutate_fun = periodReturn,
period = "daily", type = "log")
dailyLogReturn <- stockPrices %>% select(symbol,date, daily.returns) %>% spread(date,daily.returns)
View(dailyLogReturn)
View(dailyLogReturn)
dailyLogReturn <- stockPrices %>% select(symbol,date, daily.returns) %>% spread(date,daily.returns) %>% drop_na()
View(dailyLogReturn)
distMatrix <- dist(dailyLogReturn, method=”DTW”)
View(dailyLogReturn)
a1 <- c(7,9,6,9,12,6,4,6,8)
a2 <- c(5,6,4,3,9,5,6,8,9)
data("uciCT")
xrange <- range(1:9)
yrange <- range(c(a1,a2))
plot(xrange, yrange, type="n", xlab="time",
ylab="value", xaxp  = c(0,10,10), yaxp  = c(3,12,9))
lines(a1, col='blue', type='l')
lines(a2, col='magenta', type='l')
xrange
yrange
dtw(a1,a2)$index1
dtw(a1,a2)$index2
a1
a2
dtw(a1,a2)
dtw(a1,a2)$index1
dtw(a1,a2)$index2
plot(dtw(a1,a2), xlab="a1 - blue", ylab="a2 - magenta", xaxp  = c(0,10,10), yaxp = c(0,10,10))
plot(dtw(a1,a2, keep=TRUE), xlab="a1 - blue", ylab="a2 - magenta", xaxp  = c(0,10,10), yaxp = c(0,10,10), type="threeway")
plot(dtw(a1,a2, keep=TRUE), xlab="a1 - blue", ylab="a2 - magenta", xaxp  = c(0,10,10), yaxp = c(0,10,10), type="threeway")
plot(dtw(a1,a2, keep=TRUE), xaxp  = c(0,10,10), yaxp = c(0,10,10), type="twoway", col=c('blue', 'magenta'))
plot(dtw(a1,a2, keep=TRUE), xaxp  = c(0,10,10), yaxp = c(0,10,10), type="twoway", col=c('blue', 'magenta'))
plot(dtw(a1,a2, keep=TRUE), xlab="a1 - blue", ylab="a2 - magenta", xaxp  = c(0,10,10), yaxp = c(0,10,10), type="threeway")
.Primitive("c")
plot(dtw(a1,a2), xlab="a1 - blue", ylab="a2 - magenta", xaxp  = c(0,10,10), yaxp = c(0,10,10))
plot(dtw(a1,a2), xlab="a1 - blue", ylab="a2 - magenta", xaxp  = c(0,10,10), yaxp = c(0,10,10))
plot(dtw(a1,a2, keep=TRUE), xlab="a1 - blue", ylab="a2 - magenta", xaxp  = c(0,10,10), yaxp = c(0,10,10), type="threeway")
dtw(a1, a2)$stepPattern
dtw(a1, a2, step.pattern = symmetric1)$stepPattern
dtw_matrix = matrix(rep(c(0),81), nrow=9, ncol=9, byrow = TRUE)
dtw_matrix
dtw_matrix[1,1] = sqrt(a1[1]^2 + a2[1]^2)
dtw_matrix
for (i in 2:9){
dtw_matrix[i,1] = sqrt((a1[i] - a2[1])^2) + dtw_matrix[i-1,1]
}
dtw_matrix
dtw_matrix[1,j] = sqrt((a1[1] - a2[j])^2) + dtw_matrix[1,j-1]
for (j in 2:9){
dtw_matrix[1,j] = sqrt((a1[1] - a2[j])^2) + dtw_matrix[1,j-1]
}
for (j in 2:9){
dtw_matrix[1,j] = sqrt((a1[1] - a2[j])^2) + dtw_matrix[1,j-1]
}
dtw_matrix
for (i in 2:9){
for (j in 2:9){
dtw_matrix[i,j] = sqrt((a1[i] - a2[j])^2) + min(dtw_matrix[i,j-1], dtw_matrix[i-1,j], dtw_matrix[i-1,j-1])
}
}
dtw_matrix
path = c(9,9) # starting with furthest place in matrix
i = 9
j = 9
while(i>1 & j>1){
if (j == 1) {
j = j - 1
} else if (i == 1) {
i = i - 1
} else if (dtw_matrix[i-1,j] == min(dtw_matrix[i-1, j-1], dtw_matrix[i-1, j], dtw_matrix[i, j-1])){
i = i - 1
} else if (dtw_matrix[i-1,j-1] == min(dtw_matrix[i-1, j-1], dtw_matrix[i-1, j], dtw_matrix[i, j-1])){
i = i - 1
j = j - 1
} else {
j = j - 1
}
path = rbind(path, c(i,j))
}
path = rbind(path, c(1,1))
plot(dtw(a1,a2, step.pattern = symmetric1))
points(path[,1], path[,2], type = "l")
plot(dtw(a1,a2, step.pattern = symmetric1))
points(path[,1], path[,2], type = "l")
head(emissions)
head(dailyLogReturn)
head(dailyLogReturn[-1])
dailyLogReturn.norm <- BBmisc::normalize(dailyLogReturn, method="standardize")
??BBmics
??BBmisc
?BBmisc
install.packages("BBmisc")
require(BBmisc)
dailyLogReturn.norm <- BBmisc::normalize(dailyLogReturn, method="standardize")
clust.pam <- tsclust(dailyLogReturn.norm, type="partitional", k=2L:17L, distance="dtw", centroid="pam")
ncol(dailyLogReturn)
clust.pam <- tsclust(dailyLogReturn.norm, type="partitional", k=2L:ncol(dailyLogReturn)L, distance="dtw", centroid="pam")
clust.pam <- tsclust(dailyLogReturn.norm, type="partitional", k=2:252, distance="dtw", centroid="pam")
clust.pam <- tsclust(dailyLogReturn.norm, type="partitional", k=2L:252L, distance="dtw", centroid="pam")
clust.pam <- tsclust(dailyLogReturn.norm, type="partitional", k=2L:253L, distance="dtw", centroid="pam")
clust.pam <- tsclust(dailyLogReturn.norm, type="partitional", k=2L:5L, distance="dtw", centroid="pam")
AT <- c(10.3, 10.7, 10.9, 11.5, 11.4, 11.5, 11.1, 10.8, 10.7, 9.8, 10.4, 10.1)
b <- runif(17, min=7, max=12)
b
emissions <- data.frame(c(AT, BE, BG, CH, CY, CA)
, X2000=runif(17, min=7, max=12))
emissions <- data.frame(c("AT", "BE", "BG", "CH", "CY", "CA")
, X2000=runif(6, min=7, max=12))
emissions
emissions <- data.frame(name = c("AT", "BE", "BG", "CH", "CY", "CA")
, X2000=runif(6, min=7, max=12))
emissions
emissions <- data.frame(name = c("AT", "BE", "BG", "CH", "CY", "CA")
, X2000=runif(6, min=7, max=12)
, X2001=runif(6, min=7, max=12)
, X2002=runif(6, min=7, max=12)
, X2003=runif(6, min=7, max=12)
, X2004=runif(6, min=7, max=12)
, X2005=runif(6, min=7, max=12)
, X2006=runif(6, min=7, max=12)
, X2007=runif(6, min=7, max=12)
, X2008=runif(6, min=7, max=12)
, X2009=runif(6, min=7, max=12))
emissions
head(emissions)
emissions.norm <- BBmisc::normalize(emissions, method="standardize")
clust.pam <- tsclust(emissions.norm, type="partitional", k=2L:5L, distance="dtw", centroid="pam")
clust.pam <- tsclust(emissions.norm, type="partitional", k=2L:11L, distance="dtw", centroid="pam")
clust.pam <- tsclust(emissions.norm, type="partitional", k=2L:17L, distance="dtw", centroid="pam")
clust.pam <- tsclust(emissions.norm, type="partitional", k=2L:5L, distance="dtw", centroid="pam")
emissions <- data.frame(name = c("AT", "BE", "BG", "CH", "CY", "CA")
, X2000=runif(6, min=7, max=12)
, X2001=runif(6, min=7, max=12)
, X2002=runif(6, min=7, max=12)
, X2003=runif(6, min=7, max=12)
, X2004=runif(6, min=7, max=12)
, X2005=runif(6, min=7, max=12)
, X2006=runif(6, min=7, max=12)
, X2007=runif(6, min=7, max=12)
, X2008=runif(6, min=7, max=12)
, X2009=runif(6, min=7, max=12)
, X2010=runif(6, min=7, max=12)
, X2011=runif(6, min=7, max=12)
, X2012=runif(6, min=7, max=12)
, X2013=runif(6, min=7, max=12)
, X2014=runif(6, min=7, max=12)
, X2015=runif(6, min=7, max=12)
, X2016=runif(6, min=7, max=12))
head(emissions)
emissions.norm <- BBmisc::normalize(emissions, method="standardize")
emissions.norm
clust.pam <- tsclust(emissions.norm, type="partitional", k=2L:5L, distance="dtw", centroid="pam")
emissions.norm <- BBmisc::normalize(emissions[-1], method="standardize")
clust.pam <- tsclust(emissions.norm, type="partitional", k=2L:5L, distance="dtw", centroid="pam")
clust.pam <- tsclust(emissions.norm, type="partitional", k=2L:17L, distance="dtw", centroid="pam")
emissions.norm <- BBmisc::normalize(emissions[-1], method="standardize")
clust.pam <- tsclust(emissions.norm, type="partitional", k=2L:17L, distance="dtw", centroid="pam")
clust.pam <- tsclust(emissions.norm, type="partitional", k=2L:5L, distance="dtw", centroid="pam")
clust.pam <- tsclust(emissions.norm, type="partitional", k=6L, distance="dtw", clustering="pam")
clust.pam <- tsclust(emissions.norm, type="partitional", k=2L:6L, distance="dtw", clustering="pam")
emissions <- data.frame(name = c("AT", "BE", "BG", "CH", "CY", "CA","MX","EU","RS","UG")
, X2000=runif(10, min=7, max=12)
, X2001=runif(10, min=7, max=12)
, X2002=runif(10, min=7, max=12)
, X2003=runif(10, min=7, max=12)
, X2004=runif(10, min=7, max=12)
, X2005=runif(10, min=7, max=12)
, X2006=runif(10, min=7, max=12)
, X2007=runif(10, min=7, max=12)
, X2008=runif(10, min=7, max=12)
, X2009=runif(10, min=7, max=12)
, X2010=runif(10, min=7, max=12)
, X2011=runif(10, min=7, max=12)
, X2012=runif(10, min=7, max=12)
, X2013=runif(10, min=7, max=12)
, X2014=runif(10, min=7, max=12)
, X2015=runif(10, min=7, max=12)
, X2016=runif(10, min=7, max=12))
emissions
head(emissions)
require(BBmisc)
emissions.norm <- BBmisc::normalize(emissions[-1], method="standardize")
clust.pam <- tsclust(emissions.norm, type="partitional", k=2L:5L, distance="dtw", centroid="pam")
# Load data
data(uciCT)
# Reinterpolate to same length
series <- reinterpolate(CharTraj, new.length = max(lengths(CharTraj)))
# Subset for speed
series <- series[1:20]
labels <- CharTrajLabels[1:20]
# Making many repetitions
pc.l2 <- tsclust(series, k = 4L,
distance = "L2", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(nrep = 10L))
# Cluster validity indices
sapply(pc.l2, cvi, b = labels)
CharTraj
head(uciCT)
head(charTraj)
series
labels
sapply(clust.pam, cvi)
clust.pam <- tsclust(emissions.norm, type="partitional", k=5L, distance="dtw", centroid="pam")
sapply(clust.pam, cvi)
clust.pam <- tsclust(emissions.norm, type="partitional", k=2L:5L, distance="dtw", centroid="pam")
sapply(clust.pam, cvi)
clust.pam <- tsclust(emissions.norm, type="partitional", k=2L:8L, distance="dtw", centroid="pam")
sapply(clust.pam, cvi)
clust.pam <- tsclust(emissions.norm, type="partitional", k=6L, distance="dtw", clustering="pam")
(x = sapply(clust.pam, cvi))
clust.pam <- tsclust(emissions.norm, type="partitional", k=2L:8L, distance="dtw", centroid="pam")
(x = sapply(clust.pam, cvi))
x[,1]
x[1,]
plot(x[1,])
plot(x[1,])
max(x[1,])
which.max(x[1,])
(x = sapply(clust.pam, cvi))
ncol(x)
index(x)
index[which.max(x[1,])]
which.max(x[1,])
index[max(x[1,])]
which.max(x$1)
x$1
which.max( x[,2] )
which.max( x[,1] )
which.max( x[1,,] )
which.max( x[1,] )
(x = sapply(clust.pam, cvi))
index(x)
max(x[1,])
x[1,]
min(x[1,])
min(x[1,])
clust.hier <- tsclust(emissions.norm, type = "h", k = 6L, distance = "dtw")
plot(clust.hier, type="sc")
cutree(clust.hier, k=6L)
cvi(clust.hier)
clust.pam <- tsclust(emissions.norm, type="partitional", k=6L, distance="dtw", clustering="pam")
cvi(clust.pam)
cvi(clust.hier)
x[4,]
(x = sapply(clust.pam, cvi))
clust.pam <- tsclust(emissions.norm, type="partitional", k=2L:8L, distance="dtw", centroid="pam")
clust.pam <- tsclust(emissions.norm, type="partitional", k=2L:8L, distance="dtw", centroid="pam")
clust.pam1 <- tsclust(emissions.norm, type="partitional", k=2L:8L, distance="dtw", centroid="pam")
(x = sapply(clust.pam1, cvi))
index(x)
x[4,]
max(x[4,])
which.max( x[1,] )
plot(x[4,])
clust.pam <- tsclust(emissions.norm, type="partitional", k=4L, distance="dtw", clustering="pam")
clust.hier <- tsclust(emissions.norm, type = "h", k = 4L, distance = "dtw")
plot(clust.hier, type="sc")
cutree(clust.hier, k=6L)
cvi(clust.hier)
cvi(clust.pam)
distMatrix <- dist(dailyLogReturn, method=”DTW”)
distMatrix <- dist(dailyLogReturn, method="DTW")
require(dtw)
distMatrix <- dist(dailyLogReturn[-1], method="DTW")
distMatrix
> hc <- hclust(distMatrix, method=”average”)
hc <- hclust(distMatrix, method="average")
plot(hc, labels=dailyLogReturn$symbol, main="")
plot(dailyLogReturn)
plot(dailyLogReturn[1])
plot(dailyLogReturn[1,])
dailyLogReturn[1,]
ts.plot(dailyLogReturn[1,], xlab = "Distance [x100m]", ylab = "Differential pace [min/km]", main = "Example of wall run", ylim=c(0,25))
ts.plot(dailyLogReturn[1,], xlab = "Distance [x100m]", ylab = "Differential pace [min/km]", main = "Example of wall run"))
ts.plot(dailyLogReturn[1,], xlab = "Distance [x100m]", ylab = "Differential pace [min/km]", main = "Example of wall run", ylim=c(0,5))
ts.plot(dailyLogReturn[1,], xlab = "Time", ylab = "Log Return", main = "Daily Log Returns of AAPL", ylim=c(0,5))
ts.plot(dailyLogReturn[1,], xlab = "Time", ylab = "Log Return", main = "Daily Log Returns of AAPL", ylim=c(0,1))
dailyLogReturn
dailyLogReturn[1,]
ts.plot(dailyLogReturn[1,], xlab = "Time", ylab = "Log Return", main = "Daily Log Returns of AAPL", ylim=c(-1,1))
require(ggplot2)
require(reshape2)
ggplot(dailyLogReturn, aes(x=log2(count), group=sample)) +
geom_line(stat="density")
AAPL %>%
ggplot(aes(x = date, y = close)) +
geom_line() +
labs(title = "AAPL Line Chart", y = "Closing Price", x = "") +
theme_tq()
dailyLogReturn[1,] %>%
ggplot(aes(x = date, y = close)) +
geom_line() +
labs(title = "AAPL Line Chart", y = "Closing Price", x = "") +
theme_tq()
dailyLogReturn[1,]
stockPrices
stockPrices[stockPrices$symbol='AAPL']
filter[stockPrices, symbol=='AAPL']
filter[stockPrices, stockPrices$symbol=='AAPL']
stockPrices
filter[stockPrices, stockPrices$symbol=="AAPL"]
stockPrices
dailyLogReturn <- stockPrices %>% select(symbol,date, daily.returns) %>% spread(date,daily.returns) %>% drop_na()
dailyLogReturn
# classic run
noise <- runif(420) # random noise
x <- seq(1,420) # 42km with a measure every 100m
pace_min <- 5 # min/km (corresponds to fast run)
ts_sim_classic_run <- (sin(x/10)+x/100+noise+pace_min) %>%
as.ts(.)
ts_sim_classic_run
ts.plot(ts_sim_classic_run, xlab = "Distance [x100m]", ylab = "Differential pace [min/km]", main = "Example of classic run", ylim=c(0,25))
# wall run
noise <- runif(210) # random noise
x <- seq(1,210) # 21km with a measure every 100m
pace_min <- 5 # min/km (corresponds to fast run)
pace_wall <- 20 # min/km (corresponds to very slow run)
ts_sim_part1 <- sin(x/5)+x/50+noise+pace_min
ts_sim_part2 <- sin(x/5)+noise+pace_wall
ts_sim_wall_run <- c(ts_sim_part1,ts_sim_part2) %>%
as.ts(.)
ts.plot(ts_sim_wall_run, xlab = "Distance [x100m]", ylab = "Differential pace [min/km]", main = "Example of wall run", ylim=c(0,25))
dtw_dist <- function(x){dist(x, method="DTW")}
ts_sim_df %>%
as.matrix() %>%
gplots::heatmap.2 (
# dendrogram control
distfun = dtw_dist,
hclustfun = hclust,
dendrogram = "column",
Rowv = FALSE,
labRow = FALSE
)
ts_sim_boot_classic <- ts_sim_classic_run %>%
tseries::tsbootstrap(., nb=5, b=200, type = "block") %>%
as.data.frame(.) %>%
dplyr::rename_all(funs(c(paste0("classic_",.))))
ts_sim_boot_wall <- ts_sim_wall_run %>%
tseries::tsbootstrap(., nb=5, b=350, type = "block") %>%
as.data.frame(.) %>%
dplyr::rename_all(funs(c(paste0("wall_",.))))
ts_sim_df <- cbind(ts_sim_boot_classic,ts_sim_boot_wall)
dtw_dist <- function(x){dist(x, method="DTW")}
ts_sim_df %>%
as.matrix() %>%
gplots::heatmap.2 (
# dendrogram control
distfun = dtw_dist,
hclustfun = hclust,
dendrogram = "column",
Rowv = FALSE,
labRow = FALSE
)
# cluster analysis
dist_ts <- TSclust::diss(SERIES = t(ts_sim_df), METHOD = "DTWARP") # note the dataframe must be transposed
hc <- stats::hclust(dist_ts, method="complete") # meathod can be also "average" or diana (for DIvisive ANAlysis Clustering)
install.packages("TSclust")
#DTW cluster
#Both TSclust and dtwclust are following the same steps:
#1 Calculating the difference between each time series using the DTW method
#(but many other distances can be calculated, see for example Montero & Vilar, 2014).
#2 Calculating hierarchical cluster analysis over these dissimilarities.
#3 Plotting a dendrogram to visually assess the cluster accuracy.
#The solution to plot the time series with the dendrogram was taken from Ian Hansel’s blog.
library(TSclust)
# cluster analysis
dist_ts <- TSclust::diss(SERIES = t(ts_sim_df), METHOD = "DTWARP") # note the dataframe must be transposed
hc <- stats::hclust(dist_ts, method="complete") # meathod can be also "average" or diana (for DIvisive ANAlysis Clustering)
# k for cluster which is 2 in our case (classic vs. wall)
hclus <- stats::cutree(hc, k = 2) %>% # hclus <- cluster::pam(dist_ts, k = 2)$clustering has a similar result
as.data.frame(.) %>%
dplyr::rename(.,cluster_group = .) %>%
tibble::rownames_to_column("type_col")
hcdata <- ggdendro::dendro_data(hc)
install.packages("ggdendro")
lbrary(ggdendro)
library(ggdendro)
# cluster analysis
dist_ts <- TSclust::diss(SERIES = t(ts_sim_df), METHOD = "DTWARP") # note the dataframe must be transposed
hc <- stats::hclust(dist_ts, method="complete") # meathod can be also "average" or diana (for DIvisive ANAlysis Clustering)
# k for cluster which is 2 in our case (classic vs. wall)
hclus <- stats::cutree(hc, k = 2) %>% # hclus <- cluster::pam(dist_ts, k = 2)$clustering has a similar result
as.data.frame(.) %>%
dplyr::rename(.,cluster_group = .) %>%
tibble::rownames_to_column("type_col")
hcdata <- ggdendro::dendro_data(hc)
names_order <- hcdata$labels$label
p1 <- hcdata %>%
ggdendro::ggdendrogram(., rotate=TRUE, leaf_labels=FALSE)
p2 <- ts_sim_df %>%
dplyr::mutate(index = 1:420) %>%
tidyr::gather(key = type_col,value = value, -index) %>%
dplyr::full_join(., hclus, by = "type_col") %>%
mutate(type_col = factor(type_col, levels = rev(as.character(names_order)))) %>%
ggplot(aes(x = index, y = value, colour = cluster_group)) +
geom_line() +
facet_wrap(~type_col, ncol = 1, strip.position="left") +
guides(color=FALSE) +
theme_bw() +
theme(strip.background = element_blank(), strip.text = element_blank())
gp1<-ggplotGrob(p1)
gp2<-ggplotGrob(p2)
grid.arrange(gp2, gp1, ncol=2, widths=c(4,2))
# cluster analysis
dist_ts <- TSclust::diss(SERIES = t(ts_sim_df), METHOD = "DTWARP") # note the dataframe must be transposed
hc <- stats::hclust(dist_ts, method="complete") # meathod can be also "average" or diana (for DIvisive ANAlysis Clustering)
# k for cluster which is 2 in our case (classic vs. wall)
hclus <- stats::cutree(hc, k = 2) %>% # hclus <- cluster::pam(dist_ts, k = 2)$clustering has a similar result
as.data.frame(.) %>%
dplyr::rename(.,cluster_group = .) %>%
tibble::rownames_to_column("type_col")
hcdata <- ggdendro::dendro_data(hc)
names_order <- hcdata$labels$label
p1 <- hcdata %>%
ggdendro::ggdendrogram(., rotate=TRUE, leaf_labels=FALSE)
p2 <- ts_sim_df %>%
dplyr::mutate(index = 1:420) %>%
tidyr::gather(key = type_col,value = value, -index) %>%
dplyr::full_join(., hclus, by = "type_col") %>%
mutate(type_col = factor(type_col, levels = rev(as.character(names_order)))) %>%
ggplot(aes(x = index, y = value, colour = cluster_group)) +
geom_line() +
facet_wrap(~type_col, ncol = 1, strip.position="left") +
guides(color=FALSE) +
theme_bw() +
theme(strip.background = element_blank(), strip.text = element_blank())
gp1<-ggplotGrob(p1)
gp2<-ggplotGrob(p2)
grid.arrange(gp2, gp1, ncol=2, widths=c(4,2))
??grid.arrange
install.packages("ggpubr")
library(ggpubr)
grid.arrange(gp2, gp1, ncol=2, widths=c(4,2))
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
grid.arrange(gp2, gp1, ncol=2, widths=c(4,2))
